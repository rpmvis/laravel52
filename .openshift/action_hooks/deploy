#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again. This script gets executed directly, so it could be python, php,
# ruby, etc.

( cd $OPENSHIFT_REPO_DIR ; composer install --no-interaction --no-dev )

# repair an error in an Illuminate vendor file:
# replace 'bindshared' with 'singleton'
sed -i 's/bindshared/singleton/g'  ${OPENSHIFT_REPO_DIR}vendor/illuminate/html/HtmlServiceProvider.php

# rene vis: source ($OPENSHIFT_CARTRIDGE_SDK_BASH) provides "set_env_var" function
source $OPENSHIFT_CARTRIDGE_SDK_BASH

set -e

echo 1>&2
echo "deploy: Setting environment variables..." 1>&2

# rene vis: export VARIABLE=value = syntax for setting an environment variable in the bash shell
#           set_env_var NEWVAR NEWVALUE $OPENSHIFT_HOMEDIR/.env/user_vars = $OPENSHIFT_CARTRIDGE_SDK_BASH function

export APP_ENV="${APPLICATION_ENV:-production}"
if [[ "${APPLICATION_ENV:-}" != "development" ]]; then
    export APP_DEBUG=false
else
    export APP_DEBUG=true
fi

# env APP_ENV + env APP_DEBUG
if [ "$(type -t set_env_var)" == "function" ]; then
    echo "deploy: setting env_var's 'APP_ENV' and 'APP_DEBUG' from .env user settings..."
    set_env_var 'APP_ENV'   $APP_ENV   $OPENSHIFT_HOMEDIR/.env/user_vars
    set_env_var 'APP_DEBUG' $APP_DEBUG $OPENSHIFT_HOMEDIR/.env/user_vars
else
   echo "set_env_var function is MISSING!!!"
fi

# env APP_URL
if [ ! -z "$OPENSHIFT_APP_DNS" ]; then
    export APP_URL="$OPENSHIFT_APP_DNS"
    if [ "$(type -t set_env_var)" == "function" ]; then
        echo "deploy: setting env_var 'APP_URL' from .env user settings..." 1>&2
        set_env_var 'APP_URL' $APP_URL $OPENSHIFT_HOMEDIR/.env/user_vars
    fi
else
    echo "OPENSHIFT_APP_DNS is MISSING!!!"
fi

# env APP_KEY
if [ ! -z "$OPENSHIFT_SECRET_TOKEN" ]; then
    export APP_KEY=${OPENSHIFT_SECRET_TOKEN:0:32}  # :0:32 = first 32 chars
    if [ "$(type -t set_env_var)" == "function" ]; then
        echo "deploy: setting env_var 'APP_KEY' from .env user settings..." 1>&2
        set_env_var 'APP_KEY' $APP_KEY $OPENSHIFT_HOMEDIR/.env/user_vars
    fi
else
    echo "OPENSHIFT_SECRET_TOKEN is MISSING!!!"
fi

# DB_DRIVER
if [ ! -z "$OPENSHIFT_POSTGRESQL_DB_HOST" ]; then
    export DB_DRIVER="pgsql"
fi

if [ ! -z "$OPENSHIFT_MYSQL_DB_HOST" ]; then
    export DB_DRIVER="mysql"
fi

if [ -z "$DB_DRIVER" ]; then
    echo 1>&2
    echo "Could not find the database cartridge.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c mysql-5.5" 1>&2
    echo "or"
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c postgresql-9.2" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
else
    echo "deploy: Database driver set to '$DB_DRIVER'..." 1>&2
    if [ "$(type -t set_env_var)" == "function" ]; then
        echo "deploy: setting env_var DB_DRIVER from .env user settings..." 1>&2
        set_env_var 'DB_DRIVER' $DB_DRIVER $OPENSHIFT_HOMEDIR/.env/user_vars
    fi
fi

# if this is initial installation, copy default storage directory
# from official Laravel installation and remove log directory
#
if [ ! -d ${OPENSHIFT_DATA_DIR}storage ]; then
    echo 1>&2
    echo "deploy: Migrating storage and log directories..." 1>&2
    echo 1>&2
    mv     ${OPENSHIFT_REPO_DIR}storage ${OPENSHIFT_DATA_DIR}storage
    rm -rf ${OPENSHIFT_DATA_DIR}storage/logs
fi

# create symlinks to new storage directory location and new log directory location
ln -sf ${OPENSHIFT_DATA_DIR}storage   ${OPENSHIFT_REPO_DIR}storage
ln -sf ${OPENSHIFT_LOG_DIR}           ${OPENSHIFT_DATA_DIR}storage/logs

# use repository .env
echo 1>&2
if [   -f ${OPENSHIFT_REPO_DIR}.openshift/.env ]; then
    echo "deploy: copying .openshift/.env file to .env ..." 1>&2
    cp -f ${OPENSHIFT_REPO_DIR}.openshift/.env ${OPENSHIFT_REPO_DIR}/.env
else
    echo "deploy: ${OPENSHIFT_REPO_DIR}.openshift/.env is MISSING!!! ..." 1>&2
fi
echo 1>&2

echo 1>&2
echo "deploy: Running 'php artisan migrate --force'..." 1>&2
echo 1>&2

# rene vis: pushd       = push directory (add dir to dir stack)
#           popd        = pop directory (remove dir from dir stack and cd into top dir of stack)
#           > /dev/null = suppress output to terminal
#
pushd ${OPENSHIFT_REPO_DIR} > /dev/null
    php artisan migrate --force
popd > /dev/null
